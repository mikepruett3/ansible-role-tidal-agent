---
- name: "Gather the package facts"
  ansible.builtin.package_facts:
    manager: auto
  when: ansible_facts.packages is not defined

- name: "Install Python PExpect module"
  block:
    - name: "Install expect, if not already installed (RHEL7)"
      package:
        name: "expect"
      when:
        - '"expect" not in ansible_facts.packages'
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version <= '7'
    - name: "Install Pexpect Python module, if not already installed (RHEL8)"
      package:
        name: "python3-pexpect"
      when:
        - '"python3-pexpect" not in ansible_facts.packages'
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version == '8'

- name: "Install Java Development Kit (OpenJDK), if not already installed"
  package:
    name: "java-latest-openjdk"
  when: '"java-latest-openjdk" not in ansible_facts.packages'

- name: "Find the JAVA_HOME from the host"
  shell: type -p java|xargs readlink -f|xargs dirname|xargs dirname
  register: shell

- name: "Set JAVA_HOME fact"
  set_fact:
    java_home: "{{ shell.stdout }}/bin/"

- name: "Create software directory under root homedir, if it does not exist"
  file:
    path: "/root/software/{{ package_name.split('.zip')[0] }}"
    state: directory

- name: "Download installer package from local repository"
  unarchive:
    src: "{{ software_url }}/{{ package_name }}"
    dest: "/root/software/{{ package_name.split('.zip')[0] }}"
    creates: "/root/software/{{ package_name.split('.zip')[0] }}/{{ package_name.split('.zip')[0] }}/install.sh"
    remote_src: yes
    validate_certs: no

- name: "Change the execute permissions of the installer script"
  file:
    path: "/root/software/{{ package_name.split('.zip')[0] }}/{{ package_name.split('.zip')[0] }}/install.sh"
    owner: root
    group: root
    mode: 0777
    state: file

- name: "Install Tidal Agent, if not already installed"
  block:
    - name: "Install Tidal Agent, if not already installed (RHEL7)"
      shell: |
        set timeout -l
        spawn ./install.sh

        expect "Continue to install? (y/n) \[n\]:"
        send -- "y\r"

        expect "Which user should own the  files? \[\]:"
        send -- "root\r"

        expect "Are these selections OK? (y/n/q) \[y\]:"
        send -- "y\r"
        
        expect "Enter choice {q}: "
        send -- "q\r"

        exit 0
      args:
        executable: /bin/expect
        chdir: "/root/software/{{ package_name.split('.zip')[0] }}/{{ package_name.split('.zip')[0] }}/"
      when:
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version <= '7'
    - name: "Install Tidal Agent, if not already installed (RHEL8)"
      expect:
        echo: yes
        command: ./install.sh
        chdir: "/root/software/{{ package_name.split('.zip')[0] }}/{{ package_name.split('.zip')[0] }}/"
        creates: /opt/TIDAL/Agent/bin/tagent
        responses:
          (.*)Continue to install(.*): "y"
          (.*)Which user should own the  files(.*): "root"
          (.*)Are these selections OK(.*): "y"
          (.*)Enter choice(.*): "q"
      when:
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version == '8'

- name: "Deploy Tidal Agent INI file"
  template:
    src: tagent.j2
    dest: /opt/TIDAL/Agent/bin/tagent.ini
    owner: root
    group: root
    mode: 0700
  notify: "Restart Tidal Agent"

- name: "Tidal Agent Init Scripts"
  block:
    - name: "Deploy Tidal Agent init script (RHEL7+)"
      template:
        src: systemd.j2
        dest: /etc/systemd/system/tidal-agent.service
        owner: root
        group: root
        mode: 0644
      notify: "Stop Tidal Agent"
      when:
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version >= '7'

- name: "Install and Enable Tidal Agent Init Scripts"
  service:
    name: "tidal-agent"
    enabled: yes
    state: started
